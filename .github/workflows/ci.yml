name: Java CI with Gradle and MySQL

on:
  push:
    branches: [ "main", "develop" ] # main 또는 develop 브랜치에 push될 때 실행
  pull_request:
    branches: [ "main", "develop" ] # main 또는 develop 브랜치로 PR 생성/업데이트 시 실행

jobs:
  build-and-test:
    runs-on: ubuntu-latest # 실행 환경 (Ubuntu 최신 버전)

    # 서비스 컨테이너로 MySQL 실행 (테스트용 DB)
    services:
      mysql:
        image: mysql:8.0 # 사용할 MySQL 이미지 버전
        env:
          MYSQL_ROOT_PASSWORD: rootpassword # 루트 비밀번호 설정
          MYSQL_DATABASE: testdb # 테스트용 데이터베이스 이름
        ports:
          - 3306:3306 # 호스트의 3306 포트를 컨테이너의 3306 포트에 매핑
        options: >- # MySQL 서버가 완전히 시작될 때까지 기다리는 헬스 체크 옵션
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
    - name: Checkout repository # 1. 코드 체크아웃
      uses: actions/checkout@v4

    - name: Set up JDK 17 # 2. JDK 설정 (프로젝트에 맞는 버전으로 변경)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle' # Gradle 의존성 캐싱

    - name: Setup Gradle # 3. Gradle 권한 설정 (선택 사항, gradlew 스크립트에 실행 권한 부여)
      run: chmod +x ./back_end/gradlew

    - name: Build and Test with Gradle # 4. Gradle로 빌드 및 테스트 실행
      run: ./gradlew build
      working-directory: ./back_end # 작업 디렉토리를 'back_end'로 명시적으로 설정
      env: # 테스트 실행 시 사용할 환경 변수 (MySQL 연결 정보)
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/Project04?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul
        SPRING_DATASOURCE_USERNAME: Project04
        SPRING_DATASOURCE_PASSWORD: 1234
        # SPRING_JPA_HIBERNATE_DDL_AUTO: create # 테스트 시 스키마 자동 생성 (필요시)
        # SPRING_FLYWAY_ENABLED: false # Flyway/Liquibase 사용 시 테스트에서 비활성화 또는 테스트용 설정 필요

    # (선택 사항) 테스트 결과 리포트 업로드
    - name: Upload Test Results
      if: always() # 항상 실행 (테스트 실패 시에도 리포트 업로드)
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: build/reports/tests/test/ # Gradle 테스트 결과 기본 경로

    - name: Rename JAR for deployment
      run: mv $(find back_end/build/libs -name '*.jar') back_end/build/libs/application.jar

    # (선택 사항) 빌드된 JAR 파일 업로드 (CD 단계에서 사용하기 위함)
    - name: Upload JAR Artifact
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: back_end/build/libs/application.jar # *.jar 대신 고정된 이름 사용

  eploy:
    needs: build-and-test # build-and-test 작업이 성공해야 실행됩니다.
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') # main 또는 develop 브랜치 푸시 시에만 실행

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # 본인의 AWS 리전으로 변경 (예: 서울)

    - name: Download JAR from artifact
      uses: actions/download-artifact@v4
      with:
        name: application-jar

    - name: Deploy to AWS Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: Project04       # Elastic Beanstalk 애플리케이션 이름
        environment_name: Project04-env # Elastic Beanstalk 환경 이름
        region: ap-northeast-2                   # 본인의 AWS 리전
        version_label: "v${{ github.sha }}"       # 배포 버전 레이블 (고유해야 함)
        deployment_package: application.jar # *.jar 대신 고정된 이름 사용
